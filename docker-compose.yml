version: '3.8'
services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8 # exists for arm mac
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOO_ADMIN_SERVER_PORT_NUMBER: 9999
    network_mode: host

  broker:
    image: docker.io/bitnami/kafka:latest
    ports:
      # - "19092:9092"
      # needed for external access
      - "9094:9094"
    volumes:
      - "./volumes/kafka-broker:/bitnami"
    environment:
      - BITNAMI_DEBUG=true
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_NODE_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      # needed for external access (else external clients get resolve problems)
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=BROKER://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=BROKER://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    restart: on-failure
    network_mode: host

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/init.sql
    network_mode: host

  auth:
    build: ./keycloak
    image: keycloak-kafka:latest
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KAFKA_TOPIC: account-events
      KAFKA_CLIENT_ID: keycloak
      KAFKA_BOOTSTRAP_SERVERS: localhost:5432
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    depends_on:
      - db
      - broker
    restart: always
    network_mode: host

  task-tracker:
    platform: linux/x86_64 # mac m2 workaround
    build: ./task-tracker
    image: task-tracker:latest
    restart: always
    depends_on:
      - db
      - broker
    environment:
    # https://www.baeldung.com/spring-boot-keycloak#keycloak-config
      - spring.security.oauth2.client.registration.keycloak.client-id=task-tracker
      - spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
      - spring.security.oauth2.client.registration.keycloak.scope=openid
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/async_architecture
      - spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/async_architecture
    ports:
      - "8090:8090"
    network_mode: host

volumes:
  db:
    driver: local
